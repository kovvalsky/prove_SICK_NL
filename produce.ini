######################## Functions #####################
[]
prelude =
    import re

    def part_to_prolog_arg(part):
        if part == 'all':
            return "[]"
        if part.isdigit():
            return part
        if part in 'trial train test'.split():
            "['{}']".format(part.upper())
        return "['{}']".format(part)

########################################################


[SICK_NL/anno/spacy_%{size}.json]
cond = %{ size in ('sm', 'md', 'lg') }
dep.raw = SICK_NL/raw.spl
dep.py = python/spacy_lex_anno.py
recipe =
    python3 %{py} -s %{size} %{raw} %{target}

[SICK_NL/anno_terms/%{parser}.%{anno}.pl]
dep.anno = SICK_NL/anno/%{anno}.json
dep.parser = SICK_NL/parses/%{parser}.pl
dep.sen = SICK_NL/sen.pl
dep.prolog = prolog/tlg_to_tt.pl
recipe =
    swipl -g "write_anno_tts('%{target}', '%{anno}'), halt" -f %{prolog} %{parser} %{sen}

[SICK_NL/latex/%{parser}.%{anno}.%{part}.tex]
cond = %{ (part in 'yes no unknown trial train test'.split()) or part.isdigit() }
dep.anno = SICK_NL/anno/%{anno}.json
dep.parser = SICK_NL/parses/%{parser}.pl
dep.sen = SICK_NL/sen.pl
dep.main = prolog/main.pl
filter = %{ part_to_prolog_arg(part) }
predicate = %{ 'tlg_pid_to_latex' if part.isdigit() else 'tlg_ids_to_latex' }
recipe =
    swipl -g "%{predicate}('%{anno}', %{filter}, '%{target}'), halt" -f %{main}  %{parser} %{sen}

[SICK_NL/latex/%{filename}.pdf]
dep.tex = SICK_NL/latex/%{filename}.tex
recipe =
    hash_extra=5000000 max_strings=5000000 lualatex --output-directory=SICK_NL/latex/ %{tex}
    rm SICK_NL/latex/%{filename}.{log,aux,tex}
